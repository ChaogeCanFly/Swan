classdef Postprocess < handle
   
    
    properties (Access = public)
    end
    
    properties (Access = protected)
               ptype
               gauss_points_name
              
        nfields 
        coordinates
        connectivities
        nnode
        npnod
        gtype
        pdim
        ndim
        etype
        nelem
        file_name
        nsteps
        fid_mesh
        fid_res
    end
    
    properties (Access = private)
        ngaus
        posgp
    end
    
    methods (Access = private)
        
       
    end
    
    methods (Access = protected)
        function setBasicParams(obj,physical_problem,file_name,results)
            obj.nfields = physical_problem.element.nfields;
            for ifield = 1:obj.nfields
                obj.coordinates{ifield} = physical_problem.element.interpolation_u(ifield).xpoints;
                obj.connectivities{ifield} = physical_problem.element.interpolation_u(ifield).T;
                obj.nnode(ifield) = physical_problem.element(ifield).nnode;
                obj.npnod(ifield) = physical_problem.element.interpolation_u(ifield).npnod;  % Number of nodes
            end
            obj.gtype = physical_problem.mesh.geometryType;
            obj.ndim = physical_problem.element.interpolation_u.ndime;
            obj.pdim = physical_problem.mesh.pdim;
            obj.ngaus = physical_problem.element(1).quadrature.ngaus;
            obj.posgp = physical_problem.element(1).quadrature.posgp';
            obj.ptype = physical_problem.mesh.ptype;
            
            switch  obj.gtype % GiD type
                case 'TRIANGLE'
                    obj.etype = 'Triangle';
                case 'QUAD'
                    obj.etype = 'Quadrilateral';
                case 'TETRAHEDRA'
                    obj.etype = 'Tetrahedra';
                case 'HEXAHEDRA'
                    obj.etype = 'Hexahedra';
            end
            obj.nelem = physical_problem.element.nelem; % Number of elements
            
            obj.gauss_points_name = 'Guass up?';
            
            obj.file_name = file_name;
            switch obj.ptype
                case 'ELASTIC'
                    obj.nsteps = 1;
                case 'Stokes'
                    obj.nsteps = length(results.physicalVars.u(1,:));
            end
        end
        
        function PrintVector(obj,nameres,indexName,problemType,result_type,result_location,location_name,results,istep)
            VectorPrinter(obj.fid_res,indexName, results, nameres,istep,result_location);
        end
        
        function PrintTensor(obj,nameres,indexName,problemType,result_type,result_location,location_name,results,istep)
           TensorPrinter(obj.fid_res, indexName, results, nameres,istep,result_location,location_name);
        end
        
        function PrintScalar(obj,nameres,indexName,problemType,result_type,result_location,location_name,results,istep)
           ScalarPrinter(obj.fid_res,results,nameres,istep,result_location);
        end
        
        function PrintMeshFile(obj)
            coord = obj.coordinates{1};
            connec = obj.connectivities{1};
            MeshPrinter(obj.nsteps,obj.file_name,...
                obj.npnod,obj.pdim,obj.nnode,coord,connec,obj.nelem,obj.ndim,obj.etype);
        end

        
        function Write_header_res_file(obj)            
            %% File Header
            fprintf(obj.fid_res,'GiD Post Results File 1.0\n\n');
            obj.printTitle(obj.fid_res);
        end
        
        function PrintGaussPointsHeader(obj)
            fprintf(obj.fid_res,'GaussPoints "%s" Elemtype %s\n',obj.gauss_points_name,obj.etype);
            fprintf(obj.fid_res,'Number of Gauss Points: %.0f\n',obj.ngaus);
            fprintf(obj.fid_res,'Nodes not included\n');
            fprintf(obj.fid_res,'Natural Coordinates: given\n');
            for igaus = 1:obj.ngaus
                for idime = 1:obj.ndim
                    fprintf(obj.fid_res,'%12.5d ',obj.posgp(igaus,idime));
                end
                fprintf(obj.fid_res,'\n');
            end
            fprintf(obj.fid_res,'End GaussPoints\n');
        end
         
        function PrintResFile(obj,results)
            iD = obj.fid_res;
            fN = obj.fileName;
            nS = obj.nsteps;
            gD = obj.gauss_points_name;
            eT = obj.etype;
            nG = obj.ngaus;
            nD = obj.ndim;
            pG = obj.posgp;
            rS = obj
            ResultsPrinter(iD,fN,nS,gD,eT,nG,nD,pG);
        end
    end
    
     
    methods (Access = protected, Static)
        function printTitle(fid)
            fprintf(fid,'####################################################\n');
            fprintf(fid,'################# FEM-MAT-OO v.1.0 #################\n');
            fprintf(fid,'####################################################\n');
            fprintf(fid,'\n');
        end
    end
    
    methods (Access = public)
        function  print(obj,physical_problem,file_name,physicalVars)
            results.physicalVars = physicalVars;
            path = pwd;
            dir = fullfile(path,'Output',file_name);
            if ~exist(dir,'dir')
                mkdir(dir)
            end
            obj.setBasicParams(physical_problem,file_name,results)
            obj.PrintMeshFile();
            obj.PrintResFile(results)
        end
        
        function print_slave(obj,physical_problem,res_file,physicalVars)
            results.physicalVars = physicalVars;
            obj.setBasicParams(physical_problem,'',results)
            obj.fid_res = fopen(res_file,'a');
            obj.Print_results(results,1,1)
            fclose(obj.fid_res);
        end
    end
end
